/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Project2;

import com.sun.java.swing.plaf.windows.resources.windows_ja;
import java.awt.BorderLayout;
import java.awt.Color;
import java.sql.ResultSet;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import java.util.List;
import java.util.ArrayList;
import javax.swing.JLabel;

/**
 *
 * @author Bdour
 */
public class MultiChoiceQuestion extends javax.swing.JFrame {

//    public boolean nexQuestionClicked = false;
//    public static int questionCount;
    public MultiChoiceQuestion() {
        initComponents();
        this.setVisible(true);
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        pack();
        option1.requestFocus();
        if (DBhandler.currentFuzzyQuestionNumber < 2) {
            seeResult.setEnabled(false);
        }
        ButtonGroup bg = new ButtonGroup();
        bg.add(option1);
        bg.add(option2);
        bg.add(option3);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        questionTextArea = new javax.swing.JTextArea();
        option1 = new javax.swing.JRadioButton();
        option2 = new javax.swing.JRadioButton();
        option3 = new javax.swing.JRadioButton();
        nextQuestionButton = new javax.swing.JButton();
        mChoiceOutOf = new javax.swing.JLabel();
        seeResult = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(153, 153, 255));
        setLocationByPlatform(true);
        setPreferredSize(new java.awt.Dimension(542, 377));
        setResizable(false);

        questionTextArea.setEditable(false);
        questionTextArea.setBackground(new java.awt.Color(102, 102, 102));
        questionTextArea.setColumns(20);
        questionTextArea.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        questionTextArea.setForeground(new java.awt.Color(255, 255, 255));
        questionTextArea.setRows(5);
        questionTextArea.setAlignmentX(CENTER_ALIGNMENT);
        questionTextArea.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.gray, new java.awt.Color(0, 153, 153)));
        jScrollPane1.setViewportView(questionTextArea);

        option1.setBackground(new java.awt.Color(204, 204, 204));
        option1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        option2.setBackground(new java.awt.Color(204, 204, 204));
        option2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        option3.setBackground(new java.awt.Color(204, 204, 204));
        option3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        nextQuestionButton.setText("Next Question!");
        nextQuestionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextQuestionButtonActionPerformed(evt);
            }
        });

        mChoiceOutOf.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        mChoiceOutOf.setForeground(new java.awt.Color(51, 153, 255));
        mChoiceOutOf.setText("jLabel1");

        seeResult.setText("See Result!");
        seeResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeResultActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(option3)
                    .addComponent(option2)
                    .addComponent(option1))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(110, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(nextQuestionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(124, 124, 124)
                        .addComponent(seeResult)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(mChoiceOutOf, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(110, 110, 110))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(seeResult))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(mChoiceOutOf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(option1)
                        .addGap(18, 18, 18)
                        .addComponent(option2)
                        .addGap(18, 18, 18)
                        .addComponent(option3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(nextQuestionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void nextQuestionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextQuestionButtonActionPerformed
//        boolean b = true;
      //  this.getNextQuestionButton().setEnabled(false);
        if (this.option1.isSelected()) {
            if (this.option1.getText().equalsIgnoreCase(DBhandler.getMultiChoiceQuestionByID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber))[4])) {
                DBhandler.studentCollegeRankExists_ThenUpdateRank_ElseInsert(DBhandler.currentStudentID, DBhandler.getCollegeIDByMChoiceQuestionID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber)), (float) DBhandler.getDifficultyByMChoiceQID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber)) / 2);
            } else {
                DBhandler.studentCollegeRankExists_ThenUpdateRank_ElseInsert(DBhandler.currentStudentID, DBhandler.getCollegeIDByMChoiceQuestionID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber)), (float) -1 / DBhandler.getDifficultyByMChoiceQID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber)));
            }

        } else if (this.option2.isSelected()) {
            if (this.option2.getText().equalsIgnoreCase(DBhandler.getMultiChoiceQuestionByID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber))[4])) {
                DBhandler.studentCollegeRankExists_ThenUpdateRank_ElseInsert(DBhandler.currentStudentID, DBhandler.getCollegeIDByMChoiceQuestionID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber)), (float) DBhandler.getDifficultyByMChoiceQID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber)) / 2);

            } else {
                DBhandler.studentCollegeRankExists_ThenUpdateRank_ElseInsert(DBhandler.currentStudentID, DBhandler.getCollegeIDByMChoiceQuestionID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber)), (float) -1 / DBhandler.getDifficultyByMChoiceQID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber)));

            }

        } else if (this.option3.isSelected()) {
            if (this.option3.getText().equalsIgnoreCase(DBhandler.getMultiChoiceQuestionByID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber))[4])) {
                DBhandler.studentCollegeRankExists_ThenUpdateRank_ElseInsert(DBhandler.currentStudentID, DBhandler.getCollegeIDByMChoiceQuestionID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber)), (float) DBhandler.getDifficultyByMChoiceQID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber)) / 2);

            } else {
                DBhandler.studentCollegeRankExists_ThenUpdateRank_ElseInsert(DBhandler.currentStudentID, DBhandler.getCollegeIDByMChoiceQuestionID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber)), (float) -1 / DBhandler.getDifficultyByMChoiceQID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber)));
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "Please select an option!", null, JOptionPane.ERROR_MESSAGE);
//            b = false;
           // this.getNextQuestionButton().setEnabled(false);
            return;
        }
        DBhandler.currentMChoiceQuestionNumber += 1;

        if (DBhandler.currentFuzzyQuestionNumber < DBhandler.fuzzyQuestions.size()) {
            this.setVisible(false);
            System.out.println("random before= " + DBhandler.randomNumber);
            DBhandler.randomNumber = Math.random() * 12 + 7;
            System.out.println("random after= " + DBhandler.randomNumber);
            FuzzyQuestion q2 = new FuzzyQuestion();
            q2.getFuzzyTextArea().setLineWrap(true);
            q2.getFuzzyTextArea().setWrapStyleWord(true);
            q2.getFuzzyTextArea().setAlignmentX(CENTER_ALIGNMENT);
            q2.getFuzzyTextArea().setText(DBhandler.getFuzzyQuestionByID(DBhandler.fuzzyQuestions.get(DBhandler.currentFuzzyQuestionNumber))[0]);
            q2.getFuzzyOutOf().setText("Fuzzy question " + (DBhandler.currentFuzzyQuestionNumber + 1) + "/" + DBhandler.fuzzyQuestions.size() + ", " + DBhandler.getCollegeNameByFuzzyQuestionID(DBhandler.fuzzyQuestions.get(DBhandler.currentFuzzyQuestionNumber)) + ":");
//            this.setVisible(false);
        } else {
            System.out.println("end of fuzzy Qs!");
            if (DBhandler.currentMChoiceQuestionNumber < DBhandler.multiChoiceQuestions.size()) {
                this.setVisible(false);
                System.out.println("random before= " + DBhandler.randomNumber);
                DBhandler.randomNumber = Math.random() * 12;
                System.out.println("random=after " + DBhandler.randomNumber);
                MultiChoiceQuestion mcq = new MultiChoiceQuestion();
//                mcq.MChoiceQuestionCollegeName.setText(DBhandler.getCollegeNameByFuzzyQuestionID(DBhandler.fuzzyQuestions.get(DBhandler.currentFuzzyQuestionNumber)));
//                mcq.MChoiceQuestionCollegeName.setBackground(new Color(DBhandler.currentFuzzyQuestionNumber, DBhandler.getCollegeIDByMChoiceQuestionID(DBhandler.currentMChoiceQuestionNumber), 5));
                mcq.getQuestionTextArea().setLineWrap(true);
                mcq.getQuestionTextArea().setWrapStyleWord(true);
                mcq.getQuestionTextArea().setText(DBhandler.getMultiChoiceQuestionByID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber))[0]);
                mcq.getOption1().setText(DBhandler.getMultiChoiceQuestionByID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber))[1]);
                mcq.getOption2().setText(DBhandler.getMultiChoiceQuestionByID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber))[2]);
                mcq.getOption3().setText(DBhandler.getMultiChoiceQuestionByID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber))[3]);
                mcq.getmChoiceOutOf().setText("Multi-choice question " + (DBhandler.currentMChoiceQuestionNumber + 1) + "/" + DBhandler.multiChoiceQuestions.size() + ", " + DBhandler.getCollegeNameByMChoiceQuestionID(DBhandler.multiChoiceQuestions.get(DBhandler.currentMChoiceQuestionNumber)) + ":");

            } else {
                this.setVisible(false);
                System.out.println("end of m.choicies too!");
                JOptionPane.showMessageDialog(rootPane, "End of questions! Now you'll see the result with some stats!");
                Result r = new Result();
                r.setVisible(true);
            }
        }

//        this.setVisible(false);
    }//GEN-LAST:event_nextQuestionButtonActionPerformed

    private void seeResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeResultActionPerformed
        this.setVisible(false);
        new Result().setVisible(true);
    }//GEN-LAST:event_seeResultActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
//        System.out.println(DBhandler.currentQuestionNumber);

//        List<Integer> ints = new ArrayList<Integer>();
//        ints.add(5);
//        ints.add(3);
//        System.out.println(ints.size());
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MultiChoiceQuestion.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MultiChoiceQuestion.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MultiChoiceQuestion.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MultiChoiceQuestion.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new MultiChoiceQuestion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mChoiceOutOf;
    private javax.swing.JButton nextQuestionButton;
    private javax.swing.JRadioButton option1;
    private javax.swing.JRadioButton option2;
    private javax.swing.JRadioButton option3;
    private javax.swing.JTextArea questionTextArea;
    private javax.swing.JButton seeResult;
    // End of variables declaration//GEN-END:variables

    public JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    public JRadioButton getOption1() {
        return option1;
    }

    public JRadioButton getOption2() {
        return option2;
    }

    public JRadioButton getOption3() {
        return option3;
    }

    public JTextArea getQuestionTextArea() {
        return questionTextArea;
    }

    public JButton getNextQuestionButton() {
        return nextQuestionButton;
    }

    public JLabel getmChoiceOutOf() {
        return mChoiceOutOf;
    }

}
